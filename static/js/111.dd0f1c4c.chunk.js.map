{"version":3,"file":"static/js/111.dd0f1c4c.chunk.js","mappings":"kXAgBMA,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KACJC,MAAM,iHACNC,SAAS,uEACZC,SAAUH,EAAAA,KACPI,IAAI,GACJC,IAAI,IACJH,SAAS,kPAGDI,EAAY,WACvB,OAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAMtBC,EAAY,mCAAG,WAAOC,EAAP,mFAAiBC,EAAjB,EAAiBA,UAAjB,kBAEMP,GAASQ,EAAAA,EAAAA,IAAMF,IAFrB,OAGmB,eAD9BG,EAFW,QAGJC,KAAKC,gBAChBC,EAAAA,GAAMC,QAAN,iLAAoD,CAClDC,SAAU,IACVC,SAAU,eAEZR,KAEkC,aAAhCE,EAASC,KAAKC,gBACS,mBAArBF,EAASO,SACXJ,EAAAA,GAAMK,MAAN,gLAAsD,CACpDH,SAAU,IACVC,SAAU,eAGW,sBAArBN,EAASO,SACXJ,EAAAA,GAAMK,MAAN,+HAAwC,CACtCH,SAAU,IACVC,SAAU,eAGW,iBAArBN,EAASO,SACXJ,EAAAA,GAAMK,MAAN,wOAA4D,CAC1DH,SAAU,IACVC,SAAU,gBA1BC,gDA+BjBH,EAAAA,GAAMK,MAAN,iLAAkD,CAChDH,SAAU,IACVC,SAAU,eAjCK,yDAAH,wDA2ClB,OACE,SAAC,KAAD,CACEG,cAPkB,CACpB3B,MAAO,GACPE,SAAU,IAMRJ,iBAAkBA,EAClB8B,SAAUd,EAHZ,UAKE,SAACe,EAAA,EAAD,CAAKC,UAAU,YAAf,UACE,UAAC,KAAD,CAAMA,UAAS,4BAAuBC,EAAAA,EAAIC,MAAQC,aAAa,MAA/D,WACE,mBAAOH,UAAWC,EAAAA,EAAIG,MAAtB,UAA6B,SAE3B,SAAC,KAAD,CAAOC,KAAK,QAAQC,KAAK,WACzB,SAAC,KAAD,CACEA,KAAK,QACLC,UAAU,MACVP,UAAU,oBAGd,mBAAOA,UAAWC,EAAAA,EAAIO,eAAtB,UAAsC,wCAEpC,SAAC,KAAD,CAAOH,KAAM5B,EAAe,OAAS,WAAY6B,KAAK,cACtD,SAAC,KAAD,CACEA,KAAK,WACLC,UAAU,MACVP,UAAU,iBAEZ,iBACES,QAAS,WAxEnB/B,GAAgB,SAAAgC,GAAS,OAAKjC,CAAL,GAwEN,EACT4B,KAAK,SACLL,UAAWC,EAAAA,EAAIU,cAHjB,SAKGlC,GAAe,SAAC,MAAD,KAAc,SAAC,MAAD,SAGjCI,GACC,iCACE,SAAC+B,EAAA,EAAD,KACA,SAACb,EAAA,EAAD,CAAKC,UAAU,wBAAf,SAAuC,sFAGzC,iCACE,gBAAKA,UAAWC,EAAAA,EAAIY,OAApB,UACE,oBAAQb,UAAWC,EAAAA,EAAIa,IAAKT,KAAK,SAAjC,UAA0C,6BACnC,SAAC,MAAD,UAGT,gBAAKL,UAAU,wBAAf,UACE,SAAC,KAAD,CAASe,GAAG,mBAAZ,SAA+B,0FAQ9C,EClIc,SAASC,IACtB,OACE,4BACE,2BAAO,WACP,SAACzC,EAAD,MAGL,C,qBCRD,KAAgB,KAAO,2BAA2B,MAAQ,4BAA4B,eAAiB,qCAAqC,cAAgB,oCAAoC,OAAS,6BAA6B,IAAM,0BAA0B,oBAAoB,wC","sources":["components/LoginForm/LoginForm.jsx","pages/Login.jsx","webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logIn } from '../../redux/auth/operations';\nimport css from '../RegisterForm/RegisterForm.module.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Col from 'react-bootstrap/Col';\nimport toast from 'react-hot-toast';\nimport * as Yup from 'yup';\nimport { NavLink } from 'react-router-dom';\nimport { IoLogInOutline } from 'react-icons/io5';\nimport { IoMdEye } from 'react-icons/io';\nimport { IoMdEyeOff } from 'react-icons/io';\nimport { selectIsLoading } from '../../redux/auth/selectors';\nimport Loader from '../Loader';\n\nconst validationSchema = Yup.object({\n  email: Yup.string()\n    .email('Некоректний формат email')\n    .required('Введіть ваш email'),\n  password: Yup.string()\n    .min(8)\n    .max(32)\n    .required('Введіть коректний пароль, не меньше 8 символів'),\n});\n\nexport const LoginForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const dispatch = useDispatch();\n  const loading = useSelector(selectIsLoading);\n\n  const handleTogglePassword = () => {\n    setShowPassword(prevState => !showPassword);\n  };\n\n  const handleSubmit = async (values, { resetForm }) => {\n    try {\n      const response = await dispatch(logIn(values));\n      if (response.meta.requestStatus === 'fulfilled') {\n        toast.success(`Ви успішно ввійшли в свій профіль!`, {\n          duration: 3000,\n          position: 'top-center',\n        });\n        resetForm();\n      }\n      if (response.meta.requestStatus === 'rejected') {\n        if (response.payload === 'Email is wrong') {\n          toast.error(`Користувача з таким email не знайдено!`, {\n            duration: 3000,\n            position: 'top-center',\n          });\n        }\n        if (response.payload === 'Password is wrong') {\n          toast.error(`Пароль введено не вірно!`, {\n            duration: 3000,\n            position: 'top-center',\n          });\n        }\n        if (response.payload === 'Server Error') {\n          toast.error(`Сталась помилка сервера, обновіть сторінку! `, {\n            duration: 3000,\n            position: 'top-center',\n          });\n        }\n      }\n    } catch (error) {\n      toast.error(`Виникла помилка, спробуйте ще раз!`, {\n        duration: 4000,\n        position: 'top-center',\n      });\n    }\n  };\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <Col className=\"ps-1 pe-1\">\n        <Form className={`py-4 px-4 px-sm-5 ${css.form}`} autoComplete=\"off\">\n          <label className={css.label}>\n            Email\n            <Field type=\"email\" name=\"email\" />\n            <ErrorMessage\n              name=\"email\"\n              component=\"div\"\n              className=\"text-danger\"\n            />\n          </label>\n          <label className={css.label_password}>\n            Пароль\n            <Field type={showPassword ? 'text' : 'password'} name=\"password\" />\n            <ErrorMessage\n              name=\"password\"\n              component=\"div\"\n              className=\"text-danger\"\n            />\n            <span\n              onClick={() => handleTogglePassword()}\n              type=\"button\"\n              className={css.show_password}\n            >\n              {showPassword ? <IoMdEye /> : <IoMdEyeOff />}\n            </span>\n          </label>\n          {loading ? (\n            <>\n              <Loader />\n              <Col className=\"text-center mt-2 mb-3\">Вхід в систему...</Col>\n            </>\n          ) : (\n            <>\n              <div className={css.btnBox}>\n                <button className={css.btn} type=\"submit\">\n                  Вхід <IoLogInOutline />\n                </button>\n              </div>\n              <div className=\"text-center mt-4 mb-3\">\n                <NavLink to=\"/forgot-password\">Забули пароль?</NavLink>\n              </div>\n            </>\n          )}\n        </Form>\n      </Col>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <title>Login</title>\n      <LoginForm />\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"label\":\"RegisterForm_label__4pTXF\",\"label_password\":\"RegisterForm_label_password__TyeGV\",\"show_password\":\"RegisterForm_show_password__mFb8V\",\"btnBox\":\"RegisterForm_btnBox__oF6e7\",\"btn\":\"RegisterForm_btn__bgTuW\",\"glowing-button-85\":\"RegisterForm_glowing-button-85__sctaw\"};"],"names":["validationSchema","Yup","email","required","password","min","max","LoginForm","useState","showPassword","setShowPassword","dispatch","useDispatch","loading","useSelector","selectIsLoading","handleSubmit","values","resetForm","logIn","response","meta","requestStatus","toast","success","duration","position","payload","error","initialValues","onSubmit","Col","className","css","form","autoComplete","label","type","name","component","label_password","onClick","prevState","show_password","Loader","btnBox","btn","to","Login"],"sourceRoot":""}